{"version":3,"sources":["Nav/index.js","Nav/Nav.js","Loading/index.js","Loading/Loading.js","MainDashboard/index.js","MainDashboard/MainDashboard.js","RawTable/index.js","RawTable/RawTable.js","GroupResource/GroupResource.js","GroupResource/index.js","GroupType/index.js","GroupType/GroupType.js","App/App.js","App/index.js","serviceWorker.js","index.js"],"names":["Nav","location","useLocation","console","log","type","theme","expand","href","navbar","active","pathname","Loading","isLoading","children","style","width","textAlign","marginTop","height","viewBox","xmlns","stroke","fill","fill-rule","stroke-width","cx","cy","r","attributeName","begin","dur","values","calcMode","keyTimes","keySplines","repeatCount","MainDashboard","useState","loading","setLoading","data","setData","instance","axios","create","baseURL","timeout","headers","useEffect","get","then","response","catch","error","chartFormat","Object","keys","groupByInitiatorType","map","iniType","className","avgTimeDuration","avgTimeRedirect","avgTimeResponse","margin","top","right","left","bottom","strokeDasharray","dataKey","initiatorType","color","RawTable","filter","setFilter","typeTheme","undefined","showList","item","splice","proportionByTotal","total","value","onChange","e","target","key","_id","name","property","JSON","stringify","multi","bar","duration","redirectEnd","redirectStart","connectStart","fetchStart","domainLookupEnd","domainLookupStart","connectEnd","responseStart","responseEnd","requestStart","Date","dateAdded","toLocaleString","ToggleOpt","title","open","setOpen","cursor","onClick","count","display","paddingLeft","hostName","req","GroupResource","topResources","setTopResources","topHosts","setTopHosts","topResourcesList","length","url","URL","host","sort","a","b","groupByHosts","reduce","rv","x","push","topHostsList","layout","GroupType","App","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c2ec0532.chunk.js","sourcesContent":["import Nav from './Nav';\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport {\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  FormInput,\r\n  Collapse\r\n} from \"shards-react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nconst Navigation = () => {\r\n    let location = useLocation();\r\n    console.log(location);\r\n    return (\r\n      <Navbar type=\"dark\" theme=\"primary\" expand=\"md\">\r\n        <NavbarBrand href=\"#\">Resources Analytics</NavbarBrand>\r\n        <Nav navbar>\r\n          <NavItem>\r\n            <NavLink active={location.pathname === \"/\"} href=\"#/\">\r\n              Active\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink active={location.pathname === \"/raw\"} href=\"#/raw\">\r\n              Raw\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink active={location.pathname === \"/groupResource\"} href=\"#/groupResource\">\r\n              Group Resource\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink active={location.pathname === \"/groupType\"} href=\"#/groupType\">\r\n              Group Type\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n}\r\n\r\nexport default Navigation;\r\n","import Loading from './Loading';\r\n\r\nexport default Loading;\r\n","import React, { Children } from 'react'\r\n\r\nconst Loading = ({ isLoading, children }) => {\r\n    return !isLoading ? children : (\r\n        <div style={{ width: '100%', textAlign: 'center', marginTop: '300px' }}>\r\n            <svg width=\"80\" height=\"80\" viewBox=\"0 0 44 44\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"#007bff\">\r\n                <g fill=\"none\" fill-rule=\"evenodd\" stroke-width=\"2\">\r\n                    <circle cx=\"22\" cy=\"22\" r=\"1\">\r\n                        <animate attributeName=\"r\"\r\n                            begin=\"0s\" dur=\"1.8s\"\r\n                            values=\"1; 20\"\r\n                            calcMode=\"spline\"\r\n                            keyTimes=\"0; 1\"\r\n                            keySplines=\"0.165, 0.84, 0.44, 1\"\r\n                            repeatCount=\"indefinite\" />\r\n                        <animate attributeName=\"stroke-opacity\"\r\n                            begin=\"0s\" dur=\"1.8s\"\r\n                            values=\"1; 0\"\r\n                            calcMode=\"spline\"\r\n                            keyTimes=\"0; 1\"\r\n                            keySplines=\"0.3, 0.61, 0.355, 1\"\r\n                            repeatCount=\"indefinite\" />\r\n                    </circle>\r\n                    <circle cx=\"22\" cy=\"22\" r=\"1\">\r\n                        <animate attributeName=\"r\"\r\n                            begin=\"-0.9s\" dur=\"1.8s\"\r\n                            values=\"1; 20\"\r\n                            calcMode=\"spline\"\r\n                            keyTimes=\"0; 1\"\r\n                            keySplines=\"0.165, 0.84, 0.44, 1\"\r\n                            repeatCount=\"indefinite\" />\r\n                        <animate attributeName=\"stroke-opacity\"\r\n                            begin=\"-0.9s\" dur=\"1.8s\"\r\n                            values=\"1; 0\"\r\n                            calcMode=\"spline\"\r\n                            keyTimes=\"0; 1\"\r\n                            keySplines=\"0.3, 0.61, 0.355, 1\"\r\n                            repeatCount=\"indefinite\" />\r\n                    </circle>\r\n                </g>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import MainDashboard from './MainDashboard';\r\n\r\nexport default MainDashboard;\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardTitle,\r\n    CardBody,\r\n} from \"shards-react\";\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n} from 'recharts';\r\nimport Loading from '../Loading';\r\n\r\nconst MainDashboard = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState(null);\r\n    \r\n    const instance = axios.create({\r\n        baseURL: \"http://3.21.156.211:3005/\",\r\n        timeout: 1000,\r\n        headers: { \"X-Custom-Header\": \"foobar\" },\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n\r\n        instance.get('/info')\r\n            .then(function (response) {\r\n            setData(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                setData(null);\r\n            console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const chartFormat = data && !loading && Object.keys(data.groupByInitiatorType).map(iniType => (\r\n        {\r\n            iniType,\r\n            ...data.groupByInitiatorType[iniType],\r\n        }\r\n    ));\r\n\r\n    return (\r\n        <Loading isLoading={loading}>\r\n            <Container className='pt-4'>\r\n                {data && !loading && <>\r\n                <Row className='pt-3'>\r\n                    <Col>\r\n                        <h3>Average time</h3>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className='mb-3 mt-3'>\r\n                            <CardBody>\r\n                                <CardTitle>Request (ms)</CardTitle>\r\n                                {data.avgTimeDuration}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col>\r\n                        <Card className='mb-3 mt-3'>\r\n                            <CardBody>\r\n                                <CardTitle>Redirect (ms)</CardTitle>\r\n                                {data.avgTimeRedirect}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col>\r\n                        <Card className='mb-3 mt-3'>\r\n                            <CardBody>\r\n                                <CardTitle>Response (ms)</CardTitle>\r\n                                {data.avgTimeResponse}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='pt-5 mt-3 pb-3'>\r\n                    <Col>\r\n                        <h3>Initiator type relation</h3>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='pt-3'>\r\n                    <Col>\r\n                        <Card className='mb-3 mt-3'>\r\n                            \r\n                <Row className='pt-3'>\r\n                    <CardBody>\r\n                <Row className='pt-3'>\r\n                    <Col>\r\n                        <BarChart\r\n                            width={500}\r\n                            height={300}\r\n                            data={chartFormat}\r\n                            margin={{\r\n                                top: 5, right: 30, left: 20, bottom: 5,\r\n                            }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"iniType\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"avgTimeDuration\" fill=\"#17C671\" />\r\n                        </BarChart>\r\n                    </Col>\r\n                    <Col>\r\n                                <BarChart\r\n                                    width={500}\r\n                                    height={300}\r\n                                    data={chartFormat}\r\n                                    margin={{\r\n                                        top: 5, right: 30, left: 20, bottom: 5,\r\n                                    }}\r\n                                >\r\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                    <XAxis dataKey=\"iniType\" />\r\n                                    <YAxis />\r\n                                    <Tooltip />\r\n                                    <Legend />\r\n                                    <Bar dataKey=\"avgTimeResponse\" fill=\"#FFB400\" />\r\n                                </BarChart>\r\n                    </Col>\r\n                    </Row>\r\n                            </CardBody>\r\n                    </Row>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='pt-5 mt-3 pb-3'>\r\n                    <Col>\r\n                        <h3>Overview by initiator type</h3>\r\n                    </Col>\r\n                </Row>\r\n                {\r\n                    Object.keys(data.groupByInitiatorType)\r\n                        .map((initiatorType => (\r\n                            <>\r\n                            <h5 style={{ color: 'gray' }}>{initiatorType}</h5>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Card className='mb-3 mt-3'>\r\n                                        <CardBody>\r\n                                            <CardTitle>Request (ms)</CardTitle>\r\n                                            {data.groupByInitiatorType[initiatorType].avgTimeDuration}\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Card className='mb-3 mt-3'>\r\n                                        <CardBody>\r\n                                            <CardTitle>Redirect (ms)</CardTitle>\r\n                                            {data.groupByInitiatorType[initiatorType].avgTimeRedirect}\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Card className='mb-3 mt-3'>\r\n                                        <CardBody>\r\n                                            <CardTitle>Response (ms)</CardTitle>\r\n                                            {data.groupByInitiatorType[initiatorType].avgTimeResponse}\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                            </>\r\n                    )))\r\n                }\r\n                </>}\r\n            </Container>\r\n        </Loading>\r\n    )\r\n}\r\n\r\nexport default MainDashboard;","import RawTable from './RawTable';\r\n\r\nexport default RawTable;\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    CardFooter,\r\n    Badge,\r\n    FormSelect,\r\n    Progress,\r\n} from \"shards-react\";\r\nimport Loading from '../Loading';\r\n\r\nconst MainDashboard = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState(null);\r\n    const [filter, setFilter] = useState('all');\r\n    \r\n    const instance = axios.create({\r\n        baseURL: \"http://3.21.156.211:3005/\",\r\n        timeout: 1000,\r\n        headers: { \"X-Custom-Header\": \"foobar\" },\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        instance.get('/info/raw/')\r\n            .then(function (response) {\r\n                setData(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                setData(null);\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const typeTheme = {\r\n        'all': undefined,\r\n        'script': undefined,\r\n        'img': 'success',\r\n        'xmlhttprequest': 'warning',\r\n        'css': 'info',\r\n        'fetch': 'danger',\r\n        'other': 'dark',\r\n    }\r\n\r\n    const handleChange = e => {\r\n        const { value } = e.target;\r\n        setFilter(value);\r\n    }\r\n\r\n    const showList = (data || [])\r\n        .filter(item => filter === 'all' || item.initiatorType === filter)\r\n        .splice(0, 30);\r\n\r\n    const proportionByTotal = (total, value) => (100 * value) / total;\r\n\r\n    return (\r\n        <Loading isLoading={loading}>\r\n            <Container className=\"pt-4\">\r\n                {data && !loading && (\r\n                    <>\r\n                        <Row>\r\n                            <Col>\r\n                                <FormSelect onChange={handleChange} value={filter}>\r\n                                    {Object.keys(typeTheme).map((value) => (\r\n                                        <option value={value}>{value}</option>\r\n                                    ))}\r\n                                </FormSelect>\r\n                                {showList.map((item) => (\r\n                                    <Card key={item._id} className=\"mb-3 mt-3\">\r\n                                        <CardHeader>\r\n                                            <Badge theme={typeTheme[item.initiatorType]}>{item.initiatorType}</Badge>&nbsp;&nbsp;\r\n                                            <strong>{item.name}</strong>\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            {Object.keys(item).map((property) => (\r\n                                                <div>\r\n                                                    <strong>{property}</strong> &nbsp;&nbsp; {JSON.stringify(item[property])}\r\n                                                </div>\r\n                                            ))}\r\n                                            <br />\r\n                                            <h5>Timeline</h5>\r\n                                            <Progress multi>\r\n                                                <Progress bar value={proportionByTotal(item.duration, item.redirectEnd - item.redirectStart)}>\r\n                                                    Redirect ({proportionByTotal(item.duration, item.redirectEnd - item.redirectStart)})\r\n                                                </Progress>\r\n                                                <Progress\r\n                                                    bar\r\n                                                    theme={\"success\"}\r\n                                                    value={proportionByTotal(item.duration, item.connectStart - item.fetchStart)}\r\n                                                >\r\n                                                    fetch ({proportionByTotal(item.duration, item.connectStart - item.fetchStart)})\r\n                                                </Progress>\r\n                                                <Progress bar value={proportionByTotal(item.duration, item.domainLookupEnd - item.domainLookupStart)}>\r\n                                                    domainLookup ({proportionByTotal(item.duration, item.domainLookupEnd - item.domainLookupStart)})\r\n                                                </Progress>\r\n                                                <Progress\r\n                                                    bar\r\n                                                    theme={\"success\"}\r\n                                                    value={proportionByTotal(item.duration, item.connectEnd - item.connectStart)}\r\n                                                >\r\n                                                    connect ({proportionByTotal(item.duration, item.connectEnd - item.connectStart)})\r\n                                                </Progress>\r\n                                                <Progress\r\n                                                    bar\r\n                                                    value={proportionByTotal(\r\n                                                        item.duration,\r\n                                                        (item.responseStart || item.responseEnd) - item.requestStart\r\n                                                    )}\r\n                                                >\r\n                                                    request (\r\n                                                    {proportionByTotal(item.duration, (item.responseStart || item.responseEnd) - item.requestStart)})\r\n                                                </Progress>\r\n                                                <Progress\r\n                                                    bar\r\n                                                    theme={\"success\"}\r\n                                                    value={proportionByTotal(item.duration, item.responseEnd - item.responseStart)}\r\n                                                >\r\n                                                    response ({proportionByTotal(item.duration, item.responseEnd - item.responseStart)})\r\n                                                </Progress>\r\n                                            </Progress>\r\n                                        </CardBody>\r\n                                        <CardFooter>\r\n                                            Report created at&nbsp;&nbsp;<Badge theme=\"light\">{new Date(item.dateAdded).toLocaleString()}</Badge>\r\n                                        </CardFooter>\r\n                                    </Card>\r\n                                ))}\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Loading>\r\n    );\r\n}\r\n\r\nexport default MainDashboard;","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Collapse,\r\n    Badge,\r\n} from \"shards-react\";\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    ResponsiveContainer,\r\n} from 'recharts';\r\nimport Loading from '../Loading';\r\n\r\nconst groupBy = function(xs, key) {\r\n    return xs.reduce(function(rv, x) {\r\n      (rv[x[key]] = rv[x[key]] || []).push(x);\r\n      return rv;\r\n    }, {});\r\n};\r\n\r\nconst ToggleOpt = ({ title, item }) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return <>\r\n        <div style={{ cursor: 'pointer' }} onClick={() => setOpen(!open)}>\r\n            <Badge>{item.count}</Badge>\r\n            <div style={{ display: 'inline-block',  paddingLeft: '10px' }}>\r\n                <strong>{item.hostName}</strong>&nbsp;\r\n                (see {open ? 'less' : 'more'})\r\n            </div>\r\n        </div>\r\n        <Collapse open={open}>\r\n            <div className=\"p-3 mt-3 border rounded\">\r\n                {item.data.map(req => <div>\r\n                    {req.iniType}\r\n                </div>)}\r\n            </div>\r\n        </Collapse>\r\n    </>\r\n}\r\n\r\nconst GroupResource = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState(null);\r\n    const [topResources, setTopResources] = useState([]);\r\n    const [topHosts, setTopHosts] = useState([]);\r\n\r\n    const instance = axios.create({\r\n        baseURL: \"http://3.21.156.211:3005/\",\r\n        timeout: 1000,\r\n        headers: { \"X-Custom-Header\": \"foobar\" },\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        instance.get('/info/group/resource')\r\n            .then(function (response) {\r\n\r\n                const data = response.data;\r\n                setData(response.data);\r\n\r\n                const topResourcesList = Object.keys(data)\r\n                    .map(iniType => (\r\n                        {\r\n                            iniType,\r\n                            count: data[iniType].length,\r\n                            url: new URL(iniType),\r\n                            host: new URL(iniType).host,\r\n                        }\r\n                    ))\r\n                    // .slice(0, 40)\r\n                    .sort((a, b) => b.count - a.count);\r\n                \r\n                setTopResources(topResourcesList);\r\n\r\n                const groupByHosts = groupBy(topResourcesList, 'host');\r\n\r\n                const topHostsList = Object.keys(groupByHosts)\r\n                    .map(hostName => ({\r\n                        hostName,\r\n                        count: groupByHosts[hostName].length,\r\n                        data: groupByHosts[hostName],\r\n                    }))\r\n                    .sort((a, b) => b.count - a.count);\r\n                    \r\n                setTopHosts(topHostsList);\r\n                \r\n            })\r\n            .catch(function (error) {\r\n                setData(null);\r\n            })\r\n            .then(function () {\r\n                setLoading(false);\r\n            });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <Loading isLoading={loading}>\r\n            <Container className='pt-4'>\r\n                {data && !loading && <>\r\n                    <Row className='pt-3'>\r\n                        <Col>\r\n                            <h3>Group resource</h3>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='pt-3'>\r\n                        <Col>\r\n                            <Card className='mb-3 mt-3'>\r\n                                <Row className='pt-3'>\r\n                                    <CardBody>\r\n                                        <h4>Most called hosts</h4>\r\n                                        <ListGroup>\r\n                                            {topHosts.map((item) =>{\r\n                                                return  <ListGroupItem>\r\n                                                    <ToggleOpt\r\n                                                        item={item}\r\n                                                    />\r\n                                                </ListGroupItem>\r\n                                            })}\r\n                                        </ListGroup>\r\n                                        <div style={{ marginTop: '70px' }}>\r\n                                            <ResponsiveContainer height={400}>\r\n                                                <BarChart\r\n                                                    layout='horizontal'\r\n                                                    data={topHosts}\r\n                                                    margin={{\r\n                                                        top: 5, right: 30, left: 20, bottom: 5,\r\n                                                    }}\r\n                                                >\r\n                                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                                    <XAxis dataKey=\"hostName\" />\r\n                                                    <YAxis />\r\n                                                    <Tooltip />\r\n                                                    <Legend />\r\n                                                    <Bar dataKey=\"count\" fill=\"#17C671\" />\r\n                                                </BarChart>\r\n                                            </ResponsiveContainer>\r\n                                        </div>\r\n                                    </CardBody>\r\n                                </Row>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='pt-3'>\r\n                        <Col>\r\n                            <Card className='mb-3 mt-3'>\r\n                                <Row className='pt-3'>\r\n                                    <CardBody>\r\n                                        <h4>Most called resources</h4>\r\n                                        <ListGroup>\r\n                                            {topResources.map((item) => <ListGroupItem>\r\n                                                <Badge>{item.count}</Badge>\r\n                                                <div style={{ display: 'inline-block',  paddingLeft: '10px' }}>\r\n                                                    {item.iniType} - {item.url.host}\r\n                                                </div>\r\n                                            </ListGroupItem>)}\r\n                                        </ListGroup>\r\n                                        <div style={{ marginTop: '70px' }}>\r\n                                            <ResponsiveContainer height={400}>\r\n                                                <BarChart\r\n                                                    layout='horizontal'\r\n                                                    data={topResources}\r\n                                                    margin={{\r\n                                                        top: 5, right: 30, left: 20, bottom: 5,\r\n                                                    }}\r\n                                                >\r\n                                                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                                    <XAxis dataKey=\"iniType\" />\r\n                                                    <YAxis />\r\n                                                    <Tooltip />\r\n                                                    <Legend />\r\n                                                    <Bar dataKey=\"count\" fill=\"#17C671\" />\r\n                                                </BarChart>\r\n                                            </ResponsiveContainer>\r\n                                        </div>\r\n                                    </CardBody>\r\n                                </Row>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    </>}\r\n            </Container>\r\n        </Loading>\r\n    )\r\n}\r\n\r\nexport default GroupResource;","import GroupResource from './GroupResource';\r\n\r\nexport default GroupResource;\r\n","import GroupType from './GroupType';\r\n\r\nexport default GroupType;\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n    CardBody,\r\n} from \"shards-react\";\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n} from 'recharts';\r\nimport Loading from '../Loading';\r\n  \r\nconst GroupType = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [data, setData] = useState(null);\r\n\r\n    const instance = axios.create({\r\n        baseURL: \"http://3.21.156.211:3005/\",\r\n        timeout: 1000,\r\n        headers: { \"X-Custom-Header\": \"foobar\" },\r\n    });\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        instance.get('/info/group/initType')\r\n            .then(function (response) {\r\n            setData(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                setData(null);\r\n            console.log(error);\r\n            })\r\n            .then(function () {\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const chartFormat = data && !loading && (\r\n        Object.keys(data).map(iniType => ({\r\n            iniType,\r\n            count: data[iniType].length,\r\n        }))\r\n    );\r\n\r\n    return (\r\n        <Loading isLoading={loading}>\r\n            <Container className='pt-4'>\r\n                {data && !loading && <>\r\n                <Row className='pt-3'>\r\n                    <Col>\r\n                        <h3>group type</h3>\r\n                    </Col>\r\n                </Row>\r\n                <Row className='pt-3'>\r\n                    <Col>\r\n                        <Card className='mb-3 mt-3'>\r\n                            <Row className='pt-3'>\r\n                                <CardBody>\r\n                                    <BarChart\r\n                                        width={500}\r\n                                        height={300}\r\n                                        data={chartFormat}\r\n                                        margin={{\r\n                                            top: 5, right: 30, left: 20, bottom: 5,\r\n                                        }}\r\n                                    >\r\n                                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                                        <XAxis dataKey=\"iniType\" />\r\n                                        <YAxis />\r\n                                        <Tooltip />\r\n                                        <Legend />\r\n                                        <Bar dataKey=\"count\" fill=\"#17C671\" />\r\n                                    </BarChart>\r\n                                </CardBody>\r\n                            </Row>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                </>}\r\n            </Container>\r\n        </Loading>\r\n    )\r\n}\r\n\r\nexport default GroupType;","import React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Nav from '../Nav';\r\nimport MainDashboard from '../MainDashboard';\r\nimport RawTable from '../RawTable';\r\nimport GroupResource from '../GroupResource';\r\nimport GroupType from '../GroupType';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Nav />\r\n        <div>\r\n          <Switch>\r\n            <Route path=\"/groupType\">\r\n              <GroupType />\r\n            </Route>\r\n            <Route path=\"/groupResource\">\r\n              <GroupResource />\r\n            </Route>\r\n            <Route path=\"/raw\">\r\n              <RawTable />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <MainDashboard />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"shards-ui/dist/css/shards.min.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}