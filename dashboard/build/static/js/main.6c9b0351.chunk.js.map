{"version":3,"sources":["components/Core/Nav/index.js","components/Core/Nav/Nav.js","utils/api.js","utils/lib.js","components/Core/Loading/index.js","components/Core/Loading/Loading.js","components/Reports/MainDashboard/index.js","components/Reports/MainDashboard/MainDashboard.js","components/Core/RequestCard/index.js","components/Core/RequestCard/RequestCard.js","components/Core/ShowMoreList/index.js","components/Core/ShowMoreList/ShowMoreList.js","components/Reports/RawTable/index.js","components/Reports/RawTable/RawTable.js","components/Reports/GroupResource/GroupResource.js","components/Reports/GroupResource/index.js","components/Reports/GroupType/index.js","components/Reports/GroupType/GroupType.js","components/Reports/Ip/index.js","components/Reports/Ip/Ip.js","components/Reports/Session/index.js","components/Reports/Session/Session.js","components/Core/ToggleItem/index.js","components/Core/ToggleItem/ToggleItem.js","components/Reports/Geolocation/index.js","components/Reports/Geolocation/Geolocation.js","components/App/App.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Nav","location","useLocation","type","theme","expand","href","navbar","slug","name","map","opt","active","pathname","API","axios","create","baseURL","process","timeout","validateStatus","status","interceptors","response","use","error","data","mensagem","console","log","Promise","reject","formatTime","milisecondsTime","n","Math","round","Number","EPSILON","typeTheme","all","undefined","script","img","xmlhttprequest","css","fetch","other","paramsTips","tips","reduce","prev","curr","Loading","isLoading","children","style","width","textAlign","marginTop","height","viewBox","xmlns","stroke","fill","fill-rule","stroke-width","cx","cy","r","attributeName","begin","dur","values","calcMode","keyTimes","keySplines","repeatCount","MainDashboard","useState","loading","setLoading","setData","useEffect","get","then","catch","chartFormat","Object","keys","groupByInitiatorType","iniType","className","avgTimeDuration","avgTransferSize","avgTimeResponse","count","fullChacedCount","String","biggestInitiator","toUpperCase","margin","top","right","left","bottom","strokeDasharray","dataKey","initiatorType","local","color","RequestCard","request","key","_id","property","title","description","JSON","stringify","multi","magicMath","redirectEnd","redirectStart","connectStart","fetchStart","domainLookupEnd","domainLookupStart","connectEnd","responseStart","responseEnd","requestStart","item","indexKey","bar","value","total","duration","Date","dateAdded","toLocaleString","ShowMoreList","list","showUntil","changeCount","listItems","slice","moreToShow","min","length","comp","i","onClick","RawTable","filter","setFilter","showList","splice","onChange","e","target","ToggleOpt","open","setOpen","cursor","display","paddingLeft","hostName","req","GroupResource","topResources","setTopResources","topHosts","setTopHosts","topResourcesList","url","URL","host","sort","a","b","groupByHosts","rv","x","push","topHostsList","layout","GroupType","Ip","Session","ToggleItem","badge","visi","setVisi","Geolocation","barChartData","d","bars","generatorObject","localData","fullPropertyName","hasLocalData","Boolean","isChildArray","Array","isArray","isObjArray","Cidade","Recursos","forEach","localLabel","barCharFormat","marginBottom","plotLevels","items","level","size","auxText","App","path","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6c9b0351.chunk.js","sourcesContent":["import Nav from './Nav';\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from \"shards-react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nconst Navigation = () => {\r\n  let location = useLocation();\r\n\r\n  const options = [\r\n    { slug: \"\", name: \"Home\" },\r\n    { slug: \"raw\", name: \"Raw\" },\r\n    { slug: \"groupResource\", name: \"Group Resource\" },\r\n    { slug: \"groupType\", name: \"Group Type\" },\r\n    { slug: \"geolocation\", name: \"Geolocation\" },\r\n    { slug: \"ip\", name: \"IP\" },\r\n    { slug: \"session\", name: \"Session\" },\r\n  ];\r\n\r\n  return (\r\n    <Navbar type=\"dark\" theme=\"primary\" expand=\"md\">\r\n      <NavbarBrand href=\"#\">Resources Analytics</NavbarBrand>\r\n      <Nav navbar>\r\n        {options.map((opt) => (\r\n          <NavItem>\r\n            <NavLink active={location.pathname === `/${opt.slug}`} href={`#/${opt.slug}`}>\r\n              {opt.name}\r\n            </NavLink>\r\n          </NavItem>\r\n        ))}\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: process.env.REACT_APP_BACKEND_URL,\r\n  timeout: 3 * 60 * 1000,\r\n  validateStatus: function (status) {\r\n    return status < 400;\r\n  },\r\n});\r\n\r\nAPI.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error?.response?.status === 400 && error?.response?.data?.data?.mensagem) {\r\n      console.log({ error });\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default API;\r\n","import tips from \"utils/propertyHelper.json\";\r\n\r\nexport const formatTime = (milisecondsTime) => {\r\n  if (!milisecondsTime) return \"—\";\r\n\r\n  const n = Math.round((milisecondsTime + Number.EPSILON) * 100) / 100;\r\n  return `${n} ms`;\r\n};\r\n\r\nexport const typeTheme = {\r\n  all: undefined,\r\n  script: undefined,\r\n  img: \"success\",\r\n  xmlhttprequest: \"warning\",\r\n  css: \"info\",\r\n  fetch: \"danger\",\r\n  other: \"dark\",\r\n};\r\n\r\nexport const paramsTips = tips.reduce(\r\n  (prev, curr) => ({\r\n    ...prev,\r\n    [curr.name]: curr,\r\n  }),\r\n  {}\r\n);\r\n","import Loading from './Loading';\r\n\r\nexport default Loading;\r\n","import React, { Children } from 'react'\r\n\r\nconst Loading = ({ isLoading, children }) => {\r\n    return !isLoading ? children : (\r\n        <div style={{ width: '100%', textAlign: 'center', marginTop: '300px' }}>\r\n            <svg width=\"80\" height=\"80\" viewBox=\"0 0 44 44\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"#007bff\">\r\n                <g fill=\"none\" fill-rule=\"evenodd\" stroke-width=\"2\">\r\n                    <circle cx=\"22\" cy=\"22\" r=\"1\">\r\n                        <animate attributeName=\"r\"\r\n                            begin=\"0s\" dur=\"1.8s\"\r\n                            values=\"1; 20\"\r\n                            calcMode=\"spline\"\r\n                            keyTimes=\"0; 1\"\r\n                            keySplines=\"0.165, 0.84, 0.44, 1\"\r\n                            repeatCount=\"indefinite\" />\r\n                        <animate attributeName=\"stroke-opacity\"\r\n                            begin=\"0s\" dur=\"1.8s\"\r\n                            values=\"1; 0\"\r\n                            calcMode=\"spline\"\r\n                            keyTimes=\"0; 1\"\r\n                            keySplines=\"0.3, 0.61, 0.355, 1\"\r\n                            repeatCount=\"indefinite\" />\r\n                    </circle>\r\n                    <circle cx=\"22\" cy=\"22\" r=\"1\">\r\n                        <animate attributeName=\"r\"\r\n                            begin=\"-0.9s\" dur=\"1.8s\"\r\n                            values=\"1; 20\"\r\n                            calcMode=\"spline\"\r\n                            keyTimes=\"0; 1\"\r\n                            keySplines=\"0.165, 0.84, 0.44, 1\"\r\n                            repeatCount=\"indefinite\" />\r\n                        <animate attributeName=\"stroke-opacity\"\r\n                            begin=\"-0.9s\" dur=\"1.8s\"\r\n                            values=\"1; 0\"\r\n                            calcMode=\"spline\"\r\n                            keyTimes=\"0; 1\"\r\n                            keySplines=\"0.3, 0.61, 0.355, 1\"\r\n                            repeatCount=\"indefinite\" />\r\n                    </circle>\r\n                </g>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import MainDashboard from \"./MainDashboard\";\r\n\r\nexport default MainDashboard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, Card, CardTitle, CardBody, Badge } from \"shards-react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\r\nimport API from \"utils/api\";\r\nimport { formatTime, typeTheme } from \"utils/lib\";\r\nimport Loading from \"components/Core/Loading\";\r\n\r\nconst MainDashboard = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    API.get(\"/info\")\r\n      .then(function (response) {\r\n        setData(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        setData(null);\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const chartFormat =\r\n    data &&\r\n    !loading &&\r\n    Object.keys(data.groupByInitiatorType).map((iniType) => ({\r\n      iniType,\r\n      ...data.groupByInitiatorType[iniType],\r\n    }));\r\n\r\n  return (\r\n    <Loading isLoading={loading}>\r\n      <Container className=\"pt-4\">\r\n        {data && !loading && (\r\n          <>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <h3>Resume</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <CardBody>\r\n                    <CardTitle>Avg. Duration</CardTitle>\r\n                    {formatTime(data.avgTimeDuration)}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <CardBody>\r\n                    <CardTitle>Avg. Transfer Size</CardTitle>\r\n                    {data.avgTransferSize}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <CardBody>\r\n                    <CardTitle>Avg. Response</CardTitle>\r\n                    {formatTime(data.avgTimeResponse)}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <CardBody>\r\n                    <CardTitle>Resources used</CardTitle>\r\n                    {data.count}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <CardBody>\r\n                    <CardTitle>Cached used</CardTitle>\r\n                    {data.fullChacedCount}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <CardBody>\r\n                    <CardTitle>Most used type</CardTitle>\r\n                    {String(data.biggestInitiator.name).toUpperCase()}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-5 mt-3 pb-3\">\r\n              <Col>\r\n                <h3>Initiator type relation</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <Row className=\"pt-3\">\r\n                    <CardBody>\r\n                      <Row className=\"pt-3\">\r\n                        <Col>\r\n                          <BarChart\r\n                            width={500}\r\n                            height={300}\r\n                            data={chartFormat}\r\n                            margin={{\r\n                              top: 5,\r\n                              right: 30,\r\n                              left: 20,\r\n                              bottom: 5,\r\n                            }}\r\n                          >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"iniType\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"avgTimeDuration\" fill=\"#17C671\" />\r\n                          </BarChart>\r\n                        </Col>\r\n                        <Col>\r\n                          <BarChart\r\n                            width={500}\r\n                            height={300}\r\n                            data={chartFormat}\r\n                            margin={{\r\n                              top: 5,\r\n                              right: 30,\r\n                              left: 20,\r\n                              bottom: 5,\r\n                            }}\r\n                          >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"iniType\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"avgTimeResponse\" fill=\"#FFB400\" />\r\n                          </BarChart>\r\n                        </Col>\r\n                      </Row>\r\n                    </CardBody>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-5 mt-3 pb-3\">\r\n              <Col>\r\n                <h3>Overview by initiator type</h3>\r\n              </Col>\r\n            </Row>\r\n            {Object.keys(data.groupByInitiatorType).map((initiatorType) => {\r\n              const local = data.groupByInitiatorType;\r\n              const type = initiatorType;\r\n              return (\r\n                <>\r\n                  <Card className=\"mb-3 mt-3\">\r\n                    <CardBody>\r\n                      <Row>\r\n                        <Col>\r\n                          <Badge theme={typeTheme[type]}>{type}</Badge>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col>&nbsp;</Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col>\r\n                          <h6 style={{ color: \"gray\" }}>Request</h6>\r\n                          {formatTime(local[type].avgTimeDuration)}\r\n                        </Col>\r\n                        <Col>\r\n                          <h6 style={{ color: \"gray\" }}>Transfer size</h6>\r\n                          {formatTime(local[type].avgTransferSize)}\r\n                        </Col>\r\n                        <Col>\r\n                          <h6 style={{ color: \"gray\" }}>Response</h6>\r\n                          {formatTime(local[type].avgTimeResponse)}\r\n                        </Col>\r\n                      </Row>\r\n                    </CardBody>\r\n                  </Card>\r\n                </>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Loading>\r\n  );\r\n};\r\n\r\nexport default MainDashboard;\r\n","import RequestCard from \"./RequestCard\";\r\n\r\nexport default RequestCard;\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardBody, CardFooter, Progress, Badge } from \"shards-react\";\r\nimport { typeTheme, paramsTips, formatTime } from \"utils/lib\";\r\nimport \"./RequestCard.css\";\r\n\r\nconst RequestCard = ({ request: r }) => {\r\n  const proportionByTotal = (total, value) => (100 * value) / total;\r\n\r\n  const timelineMath = [\r\n    { name: \"Redirect\", magicMath: (r) => r.redirectEnd - r.redirectStart },\r\n    { name: \"fetch\", magicMath: (r) => r.connectStart - r.fetchStart },\r\n    { name: \"domainLookup\", magicMath: (r) => r.domainLookupEnd - r.domainLookupStart },\r\n    { name: \"connect\", magicMath: (r) => r.connectEnd - r.connectStart },\r\n    { name: \"request\", magicMath: (r) => (r.responseStart || r.responseEnd) - r.requestStart },\r\n    { name: \"response\", magicMath: (r) => r.responseEnd - r.responseStart },\r\n  ];\r\n\r\n  return (\r\n    <Card key={r._id} className=\"mb-3 mt-3 request-card-content\">\r\n      <CardHeader>\r\n        <Badge theme={typeTheme[r.initiatorType]}>{r.initiatorType}</Badge>&nbsp;&nbsp;\r\n        <strong>{r.name}</strong>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {Object.keys(r).map((property) => (\r\n          <div title={(paramsTips[property] || { description: \"\" }).description}>\r\n            <strong>{property}</strong> &nbsp;&nbsp; {JSON.stringify(r[property])}\r\n          </div>\r\n        ))}\r\n        <br />\r\n        <h5>Timeline</h5>\r\n        <Progress multi>\r\n          {timelineMath.map((item, indexKey) => (\r\n            <Progress bar value={proportionByTotal(r.duration, item.magicMath(r))} theme={indexKey % 2 === 1 ? \"\" : \"success\"}>\r\n              {item.name}\r\n            </Progress>\r\n          ))}\r\n        </Progress>\r\n      </CardBody>\r\n      <CardFooter>\r\n        Report created at&nbsp;&nbsp;<Badge theme=\"light\">{new Date(r.dateAdded).toLocaleString()}</Badge>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default RequestCard;\r\n","import ShowMoreList from \"./ShowMoreList\";\r\n\r\nexport default ShowMoreList;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport \"./ShowMoreList.css\";\r\n\r\nconst ShowMoreList = ({ list, count = 5 }) => {\r\n  const [showUntil, changeCount] = useState(count);\r\n  const listItems = list.slice(0, showUntil);\r\n  const moreToShow = Math.min(list.length - listItems.length, count);\r\n  return (\r\n    <>\r\n      {listItems.slice(0, showUntil).map((comp, i) => (\r\n        <Fragment key={i}>{comp}</Fragment>\r\n      ))}\r\n      <div\r\n        onClick={() => {\r\n          changeCount(showUntil + moreToShow);\r\n        }}\r\n      >\r\n        {moreToShow > 0 && <center className=\"show-more-link\">show {moreToShow} more items</center>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowMoreList;\r\n","import RawTable from './RawTable';\r\n\r\nexport default RawTable;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, FormSelect } from \"shards-react\";\r\nimport API from \"utils/api\";\r\nimport { typeTheme } from \"utils/lib\";\r\nimport Loading from \"components/Core/Loading\";\r\nimport RequestCard from \"components/Core/RequestCard\";\r\nimport ShowMoreList from \"components/Core/ShowMoreList\";\r\n\r\nconst MainDashboard = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  const [filter, setFilter] = useState(\"all\");\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    API.get(\"/info/raw/\")\r\n      .then(function (response) {\r\n        setData(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        setData(null);\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n    setFilter(value);\r\n  };\r\n\r\n  const showList = (data || []).filter((item) => filter === \"all\" || item.initiatorType === filter).splice(0, 30);\r\n\r\n  return (\r\n    <Loading isLoading={loading}>\r\n      <Container className=\"pt-4\">\r\n        {data && !loading && (\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <FormSelect onChange={handleChange} value={filter}>\r\n                  {Object.keys(typeTheme).map((value) => (\r\n                    <option value={value}>{value}</option>\r\n                  ))}\r\n                </FormSelect>\r\n                <ShowMoreList\r\n                  list={showList.map((r) => (\r\n                    <RequestCard key={r._id} request={r} />\r\n                  ))}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Loading>\r\n  );\r\n};\r\n\r\nexport default MainDashboard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, Card, CardBody, ListGroup, ListGroupItem, Collapse, Badge } from \"shards-react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\nimport API from \"utils/api\";\r\nimport Loading from \"components/Core/Loading\";\r\nimport ShowMoreList from \"components/Core/ShowMoreList\";\r\n\r\nconst groupBy = function (xs, key) {\r\n  return xs.reduce(function (rv, x) {\r\n    (rv[x[key]] = rv[x[key]] || []).push(x);\r\n    return rv;\r\n  }, {});\r\n};\r\n\r\nconst ToggleOpt = ({ title, item }) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ cursor: \"pointer\" }} onClick={() => setOpen(!open)}>\r\n        <Badge>{item.count}</Badge>\r\n        <div style={{ display: \"inline-block\", paddingLeft: \"10px\" }}>\r\n          <strong>{item.hostName}</strong>&nbsp; (see {open ? \"less\" : \"more\"})\r\n        </div>\r\n      </div>\r\n      <Collapse open={open}>\r\n        <div className=\"p-3 mt-3 border rounded\">\r\n          {item.data.map((req) => (\r\n            <div>{req.iniType}</div>\r\n          ))}\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nconst GroupResource = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  const [topResources, setTopResources] = useState([]);\r\n  const [topHosts, setTopHosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    API.get(\"/info/group/resource\")\r\n      .then(function (response) {\r\n        const data = response.data;\r\n        setData(response.data);\r\n\r\n        const topResourcesList = Object.keys(data)\r\n          .map((iniType) => ({\r\n            iniType,\r\n            count: data[iniType].length,\r\n            url: new URL(iniType),\r\n            host: new URL(iniType).host,\r\n          }))\r\n          // .slice(0, 40)\r\n          .sort((a, b) => b.count - a.count);\r\n\r\n        setTopResources(topResourcesList);\r\n\r\n        const groupByHosts = groupBy(topResourcesList, \"host\");\r\n\r\n        const topHostsList = Object.keys(groupByHosts)\r\n          .map((hostName) => ({\r\n            hostName,\r\n            count: groupByHosts[hostName].length,\r\n            data: groupByHosts[hostName],\r\n          }))\r\n          .sort((a, b) => b.count - a.count);\r\n\r\n        setTopHosts(topHostsList);\r\n      })\r\n      .catch(function (error) {\r\n        setData(null);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Loading isLoading={loading}>\r\n      <Container className=\"pt-4\">\r\n        {data && !loading && (\r\n          <>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <h3>Group resource</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <Row className=\"pt-3\">\r\n                    <CardBody>\r\n                      <h4>Most called hosts</h4>\r\n                      <ListGroup>\r\n                        <ShowMoreList\r\n                          list={topHosts.map((item) => {\r\n                            return (\r\n                              <ListGroupItem>\r\n                                <ToggleOpt item={item} />\r\n                              </ListGroupItem>\r\n                            );\r\n                          })}\r\n                        />\r\n                      </ListGroup>\r\n                      <div style={{ marginTop: \"70px\" }}>\r\n                        <ResponsiveContainer height={400}>\r\n                          <BarChart\r\n                            layout=\"horizontal\"\r\n                            data={topHosts}\r\n                            margin={{\r\n                              top: 5,\r\n                              right: 30,\r\n                              left: 20,\r\n                              bottom: 5,\r\n                            }}\r\n                          >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"hostName\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"count\" fill=\"#17C671\" />\r\n                          </BarChart>\r\n                        </ResponsiveContainer>\r\n                      </div>\r\n                    </CardBody>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <Row className=\"pt-3\">\r\n                    <CardBody>\r\n                      <h4>Most called resources</h4>\r\n                      <ListGroup>\r\n                        <ShowMoreList\r\n                          list={topResources.map((item) => (\r\n                            <ListGroupItem>\r\n                              <Badge>{item.count}</Badge>\r\n                              <div style={{ display: \"inline-block\", paddingLeft: \"10px\" }}>\r\n                                {item.iniType} - {item.url.host}\r\n                              </div>\r\n                            </ListGroupItem>\r\n                          ))}\r\n                        />\r\n                      </ListGroup>\r\n                      <div style={{ marginTop: \"70px\" }}>\r\n                        <ResponsiveContainer height={400}>\r\n                          <BarChart\r\n                            layout=\"horizontal\"\r\n                            data={topResources}\r\n                            margin={{\r\n                              top: 5,\r\n                              right: 30,\r\n                              left: 20,\r\n                              bottom: 5,\r\n                            }}\r\n                          >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"iniType\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"count\" fill=\"#17C671\" />\r\n                          </BarChart>\r\n                        </ResponsiveContainer>\r\n                      </div>\r\n                    </CardBody>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Loading>\r\n  );\r\n};\r\n\r\nexport default GroupResource;\r\n","import GroupResource from './GroupResource';\r\n\r\nexport default GroupResource;\r\n","import GroupType from './GroupType';\r\n\r\nexport default GroupType;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, Card, CardBody } from \"shards-react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\r\nimport API from \"utils/api\";\r\nimport Loading from \"components/Core/Loading\";\r\n\r\nconst GroupType = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    API.get(\"/info/group/initType\")\r\n      .then(function (response) {\r\n        setData(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        setData(null);\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const chartFormat =\r\n    data &&\r\n    !loading &&\r\n    Object.keys(data).map((iniType) => ({\r\n      iniType,\r\n      count: data[iniType].length,\r\n    }));\r\n\r\n  return (\r\n    <Loading isLoading={loading}>\r\n      <Container className=\"pt-4\">\r\n        {data && !loading && (\r\n          <>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <h3>Group type</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <Row className=\"pt-3\">\r\n                    <CardBody>\r\n                      <BarChart\r\n                        width={500}\r\n                        height={300}\r\n                        data={chartFormat}\r\n                        margin={{\r\n                          top: 5,\r\n                          right: 30,\r\n                          left: 20,\r\n                          bottom: 5,\r\n                        }}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"iniType\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"count\" fill=\"#17C671\" />\r\n                      </BarChart>\r\n                    </CardBody>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Loading>\r\n  );\r\n};\r\n\r\nexport default GroupType;\r\n","import Ip from \"./Ip\";\r\n\r\nexport default Ip;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, Card, CardBody } from \"shards-react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\r\nimport API from \"utils/api\";\r\nimport Loading from \"components/Core/Loading\";\r\n\r\nconst Ip = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    API.get(\"/info/group/ip\")\r\n      .then(function (response) {\r\n        setData(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        setData(null);\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const chartFormat =\r\n    data &&\r\n    !loading &&\r\n    Object.keys(data).map((iniType) => ({\r\n      iniType,\r\n      count: data[iniType].length,\r\n    }));\r\n\r\n  return (\r\n    <Loading isLoading={loading}>\r\n      <Container className=\"pt-4\">\r\n        {data && !loading && (\r\n          <>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <h3>Origins</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <Row className=\"pt-3\">\r\n                    <CardBody>\r\n                      <BarChart\r\n                        width={500}\r\n                        height={300}\r\n                        data={chartFormat}\r\n                        margin={{\r\n                          top: 5,\r\n                          right: 30,\r\n                          left: 20,\r\n                          bottom: 5,\r\n                        }}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"iniType\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"count\" fill=\"#17C671\" />\r\n                      </BarChart>\r\n                    </CardBody>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Loading>\r\n  );\r\n};\r\n\r\nexport default Ip;\r\n","import Session from \"./Session\";\r\n\r\nexport default Session;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, Card, CardBody } from \"shards-react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\r\nimport API from \"utils/api\";\r\nimport Loading from \"components/Core/Loading\";\r\n\r\nconst Session = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    API.get(\"/info/group/session\")\r\n      .then(function (response) {\r\n        setData(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        setData(null);\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const chartFormat =\r\n    data &&\r\n    !loading &&\r\n    Object.keys(data).map((iniType) => ({\r\n      iniType,\r\n      count: data[iniType].length,\r\n    }));\r\n\r\n  return (\r\n    <Loading isLoading={loading}>\r\n      <Container className=\"pt-4\">\r\n        {data && !loading && (\r\n          <>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <h3>Sessions</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <Row className=\"pt-3\">\r\n                    <CardBody>\r\n                      <BarChart\r\n                        width={500}\r\n                        height={300}\r\n                        data={chartFormat}\r\n                        margin={{\r\n                          top: 5,\r\n                          right: 30,\r\n                          left: 20,\r\n                          bottom: 5,\r\n                        }}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"iniType\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"count\" fill=\"#17C671\" />\r\n                      </BarChart>\r\n                    </CardBody>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Loading>\r\n  );\r\n};\r\n\r\nexport default Session;\r\n","import ToggleItem from \"./ToggleItem\";\r\n\r\nexport default ToggleItem;\r\n","import React, { useState } from \"react\";\r\nimport { Badge } from \"shards-react\";\r\nimport { typeTheme } from \"utils/lib\";\r\nimport \"./ToggleItem.css\";\r\n\r\nconst ToggleItem = ({ title, badge, children }) => {\r\n  const [visi, setVisi] = useState(false);\r\n\r\n  return (\r\n    <div className=\"toggle-item\">\r\n      <div className=\"header\" onClick={() => setVisi(!visi)}>\r\n        <span className=\"title\">{title}</span>\r\n        <span className=\"badge-special\"> {badge && <Badge>{badge}</Badge>}</span>\r\n        <span className=\"plus\">{visi ? \"-\" : \"+\"}</span>\r\n      </div>\r\n      {visi && <div>{children}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToggleItem;\r\n","import Geolocation from \"./Geolocation\";\r\n\r\nexport default Geolocation;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, Card, CardBody, CardHeader } from \"shards-react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\r\nimport API from \"utils/api\";\r\nimport Loading from \"components/Core/Loading\";\r\nimport RequestCard from \"components/Core/RequestCard\";\r\nimport ToggleItem from \"components/Core/ToggleItem\";\r\nimport ShowMoreList from \"components/Core/ShowMoreList\";\r\n\r\nconst plotLevels = (items, level) => {\r\n  return (\r\n    <div className=\"pt-4\">\r\n      {Array.isArray(items) ? (\r\n        <div>\r\n          <ShowMoreList\r\n            list={items.map((r) => (\r\n              <RequestCard key={r._id} request={r} />\r\n            ))}\r\n          />\r\n        </div>\r\n      ) : typeof items === \"object\" ? (\r\n        Object.keys(items)\r\n          .sort((a, b) => a.property - b.property)\r\n          .map((property) => {\r\n            const isChildArray = Array.isArray(items[property]);\r\n            const isObjArray = typeof items[property] === \"object\";\r\n            const size = isChildArray ? items[property].length : isObjArray ? Object.keys(items[property]).length : \"-\";\r\n            const auxText = size === 0 ? \"Empty\" : size === 1 ? \"One item\" : `${size} subitems`;\r\n\r\n            return (\r\n              <ToggleItem key={`${level + 1}${property}`} title={property} badge={auxText}>\r\n                {plotLevels(items[property], level + 1)}\r\n              </ToggleItem>\r\n            );\r\n          })\r\n      ) : (\r\n        <hr />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst barCharFormat = (d) => {\r\n  const bars = [];\r\n\r\n  const generatorObject = (localData, fullPropertyName) => {\r\n    const hasLocalData = Boolean(localData);\r\n    const isChildArray = Array.isArray(localData);\r\n    const isObjArray = typeof localData === \"object\";\r\n\r\n    if (hasLocalData) {\r\n      if (isChildArray) {\r\n        bars.push({\r\n          Cidade: fullPropertyName,\r\n          Recursos: localData.length,\r\n        });\r\n      } else if (isObjArray) {\r\n        Object.keys(localData).forEach((item) => {\r\n          const localLabel = `${fullPropertyName ? fullPropertyName + \" / \" : \"\"} ${item}`;\r\n          generatorObject(localData[item], localLabel);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  generatorObject(d, \"\");\r\n\r\n  return bars.filter((i) => i.Recursos).sort((a, b) => b.Recursos - a.Recursos);\r\n};\r\n\r\nconst Geolocation = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    API.get(\"/info/group/geolocation\")\r\n      .then(function (response) {\r\n        setData(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        setData(null);\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const barChartData = barCharFormat(data);\r\n\r\n  return (\r\n    <Loading isLoading={loading}>\r\n      <Container className=\"pt-4\">\r\n        {data && !loading && (\r\n          <>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <h3>Geolocation</h3>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <CardHeader>\r\n                    <h5 style={{ marginBottom: \"0px\" }}>Location subsections</h5>\r\n                  </CardHeader>\r\n                  <CardBody>{plotLevels(data, 0)}</CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"pt-3\">\r\n              <Col>\r\n                <Card className=\"mb-3 mt-3\">\r\n                  <CardHeader>\r\n                    <h5 style={{ marginBottom: \"0px\" }}>Cities visualization</h5>\r\n                  </CardHeader>\r\n                  <CardBody>\r\n                    <ResponsiveContainer width=\"100px\" height=\"300px\">\r\n                      <BarChart\r\n                        data={barChartData}\r\n                        margin={{\r\n                          top: 5,\r\n                          right: 30,\r\n                          left: 20,\r\n                          bottom: 5,\r\n                        }}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"Cidade\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"Recursos\" fill=\"#17C671\" />;\r\n                      </BarChart>\r\n                    </ResponsiveContainer>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Loading>\r\n  );\r\n};\r\n\r\nexport default Geolocation;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Nav from \"components/Core/Nav\";\r\nimport MainDashboard from \"components/Reports/MainDashboard\";\r\nimport RawTable from \"components/Reports/RawTable\";\r\nimport GroupResource from \"components/Reports/GroupResource\";\r\nimport GroupType from \"components/Reports/GroupType\";\r\nimport Ip from \"components/Reports/Ip\";\r\nimport Session from \"components/Reports/Session\";\r\nimport Geolocation from \"components/Reports/Geolocation\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Nav />\r\n        <div>\r\n          <Switch>\r\n            <Route path=\"/groupType\">\r\n              <GroupType />\r\n            </Route>\r\n            <Route path=\"/groupResource\">\r\n              <GroupResource />\r\n            </Route>\r\n            <Route path=\"/raw\">\r\n              <RawTable />\r\n            </Route>\r\n            <Route path=\"/ip\">\r\n              <Ip />\r\n            </Route>\r\n            <Route path=\"/Session\">\r\n              <Session />\r\n            </Route>\r\n            <Route path=\"/Geolocation\">\r\n              <Geolocation />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <MainDashboard />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n      <center>\r\n        <p className=\"footer\">Resource analytics, 2020</p>\r\n      </center>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"shards-ui/dist/css/shards.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}