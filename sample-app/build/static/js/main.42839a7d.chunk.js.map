{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["octokit","Octokit","App","Nav","style","margin","to","ReposPage","useState","repos","setRepos","React","name","setName","getItems","org","listForOrg","type","then","data","useEffect","width","value","onChange","e","target","onClick","map","repo","marginBottom","borderBottom","height","overflow","fontSize","Object","keys","repoInfo","UsersPage","items","setItems","query","search","users","q","display","src","avatar_url","HomePage","niceUrl","setNiceUrl","fetch","response","url","alt","className","paddingBottom","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42839a7d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport { Octokit } from \"@octokit/rest\";\r\n\r\nconst octokit = new Octokit();\r\n\r\nfunction App() {\r\n  const Nav = () => {\r\n    return (\r\n        <div>\r\n            <Link style={{ margin: \"10px\" }} to=\"/home\">\r\n                Home\r\n            </Link>\r\n            <Link style={{ margin: \"10px\" }} to=\"/repos\">\r\n                Repos\r\n            </Link>\r\n            <Link style={{ margin: \"10px\" }} to=\"/users\">\r\n                Users\r\n            </Link>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  const ReposPage = () => {\r\n    const [repos, setRepos] = useState([]);\r\n    const [name,setName] = React.useState();\r\n\r\n    const getItems = (org = \"octokit\") => {\r\n      octokit.repos\r\n        .listForOrg({\r\n          org,\r\n          type: 'public'\r\n        })\r\n        .then(({ data }) => {\r\n          setRepos(data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n      getItems();\r\n    }, []);\r\n\r\n    return <div style={{ width: '100%' }}>\r\n      <div style={{ width: '100%' }}>\r\n        <input value={name} onChange={e=> setName(e.target.value)} />\r\n        <button onClick={() => getItems(name)}>Filter</button>\r\n      </div>\r\n        {repos.map((repo) => <div style={{\r\n          marginBottom: '20px',\r\n          borderBottom: 'solid red 3px',\r\n          height: '300px',\r\n          overflow: 'auto',\r\n          width: '80%',\r\n          fontSize: '12px',\r\n          margin: '0 auto',\r\n        }}>\r\n        <h3>Repo card:</h3>\r\n        {Object.keys(repo).map((repoInfo => {\r\n          return typeof repo[repoInfo] === 'string' && <p>\r\n            <strong>{repoInfo}</strong>: <code>{repo[repoInfo]}</code>\r\n          </p>})\r\n        )}\r\n      </div>)}\r\n    </div>\r\n  }\r\n\r\n  const UsersPage = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [name,setName] = React.useState();\r\n\r\n    const getItems = (query = \"john\") => {\r\n      octokit.search\r\n        .users({\r\n          q: query,\r\n        })\r\n        .then(({ data }) => {\r\n          setItems(data.items);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n      getItems();\r\n    }, []);\r\n\r\n    return <>\r\n      <div style={{ width: '100%' }}>\r\n        <input value={name} onChange={e=> setName(e.target.value)} />\r\n        <button onClick={() => getItems(name)}>Filter</button>\r\n      </div>\r\n      <div style={{ width: '100%' }}>\r\n        {items.map((repo) => <div style={{\r\n          display: 'inline-block',\r\n          marginBottom: '20px',\r\n          borderBottom: 'solid red 3px',\r\n          height: '400px',\r\n          overflow: 'auto',\r\n          width: '29%',\r\n          fontSize: '12px',\r\n          margin: '0 auto',\r\n        }}>\r\n        <h3>Repo card:</h3>\r\n        <img style={{ width: '50px' }} src={repo.avatar_url} />\r\n        {Object.keys(repo).map((repoInfo => {\r\n          return typeof repo[repoInfo] === 'string' && <p>\r\n            <strong>{repoInfo}</strong>: <code>{repo[repoInfo]}</code>\r\n          </p>})\r\n        )}\r\n        </div>)}\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  const HomePage = () => {\r\n    const [niceUrl, setNiceUrl] = useState();\r\n\r\n    useState(() => {\r\n      fetch(`https://source.unsplash.com/1600x900`)\r\n      .then((response) => {   \r\n        setNiceUrl(response.url);\r\n      });\r\n    }, [])\r\n\r\n    return <div>\r\n      <div style={{ margin: '20px' }}>welcome!</div>\r\n      {niceUrl && <img alt=\"Random image here!\" src={niceUrl} width=\"50%\" />}\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p style={{ paddingBottom: '20px' }}>Sample app here</p>\r\n        <Router>\r\n          <Nav />\r\n          <div style={{width: '100%'}}>\r\n            <Switch>\r\n              <Route path=\"/users\">\r\n                <UsersPage />\r\n              </Route>\r\n              <Route path=\"/repos\">\r\n                <ReposPage />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <HomePage />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}